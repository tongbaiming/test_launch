<launch>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
	<group ns="party_1">
	<group ns="instance_1">
  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav_tbm_2.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="namespace" value="party_1/instance_1/$(arg mav_name)" />
      <arg name="party_instance" value="1" />
      <arg name="instance_in_party" value="1" />
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> -->
    
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="0 0 1 0 5"/>
  </group>
  </group>
  
  <group ns="instance_2">
  <group ns="$(arg mav_name)">
    <include file="$(find rotors_gazebo)/launch/spawn_mav_tbm_2.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
      <arg name="namespace" value="party_1/instance_2/$(arg mav_name)" />
      <arg name="party_instance" value="1" />
      <arg name="instance_in_party" value="2" />
      <arg name="x" value="1" />
      <arg name="y" value="1" />
    </include>
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="1 1 1 0 5"/>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  </group>
  </group>
  </group>
  <group ns="party_2">
  	<group ns="instance_1">
  		<group ns="$(arg mav_name)">
				<include file="$(find rotors_gazebo)/launch/spawn_mav_tbm_2.launch">
				  <arg name="mav_name" value="$(arg mav_name)" />
				  <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
				  <arg name="enable_logging" value="$(arg enable_logging)" />
				  <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
				  <arg name="log_file" value="$(arg log_file)"/>
				  <arg name="namespace" value="party_2/instance_1/$(arg mav_name)" />
				  <arg name="party_instance" value="2" />
				  <arg name="instance_in_party" value="1" />
				  <arg name="x" value="2" />
      		<arg name="y" value="2" />
				</include>
				<node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
				  <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
				  <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
				  <remap from="odometry" to="odometry_sensor1/odometry" />
				</node>
    <!-- <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/> --> 
				<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
				<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
				<node name="waypoint_publisher" pkg="rotors_gazebo" type="waypoint_publisher" output="screen" args="2 2 1 0 5"/>
  </group>
  	</group>
  </group>
</launch>
